import streamlit as st
import pandas as pd
import numpy as np

# Load and cache data from URL (.parquet)
@st.cache_data
def load_data():
    URL_DATA = 'https://storage.dosm.gov.my/cpi/cpi_2d_state_inflation.parquet'
    df = pd.read_parquet(URL_DATA)
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
    return df

# Division code-to-name mapping
division_mapping = {
    '01': 'Food & Beverages',
    '02': 'Alcoholic Beverages & Tobacco',
    '03': 'Clothing & Footwear',
    '04': 'Housing, Utilities, Gas & Other Fuels',
    '05': 'Household Furnishings, Equipment & Maintenance',
    '06': 'Health',
    '07': 'Transport',
    '08': 'Information & Communication',
    '09': 'Recreation, Sport & Culture',
    '10': 'Education',
    '11': 'Restaurant & Accommodation Services',
    '12': 'Insurance & Financial Services',
    '13': 'Personal Care, Social Protection & Miscellaneous Goods and Services'
}

df = load_data()

# Apply division name mapping
df['division_name'] = df['division'].map(division_mapping)

# Sidebar Navigation
page = st.sidebar.radio("ðŸ“„ Select Page", ["ðŸ“Š Data View", "ðŸ”® Forecast"])

# Sidebar: Division and State selection
division_names = df['division_name'].dropna().unique()
selected_division_name = st.sidebar.selectbox("Select Division", sorted(division_names))

# Get corresponding division code
selected_division_code = [k for k, v in division_mapping.items() if v == selected_division_name][0]

# Filter states for selected division
states = df[df['division'] == selected_division_code]['state'].unique()
selected_state = st.sidebar.selectbox("Select State", sorted(states))

# Filter data based on selected division and state
state_df = df[(df['division'] == selected_division_code) & (df['state'] == selected_state)].copy()
state_df = state_df.sort_values('date')

# ------------------------ PAGE 1: DATA VIEW ------------------------
if page == "ðŸ“Š Data View":
    st.title("ðŸ“Š Inflation Rate Dashboard - Data View")

    st.markdown(f"""
    Explore **month-over-month (MoM) inflation** trends by Malaysian states and divisions.
    Use the filters on the left to select a **division** and **state**, and narrow down by date.
    """)

    # Date range filter
    min_date = state_df['date'].min()
    max_date = state_df['date'].max()
    start_date, end_date = st.sidebar.date_input(
        "Select Date Range",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    # Filter data by selected date range
    filtered_df = state_df[(state_df['date'] >= pd.to_datetime(start_date)) & (state_df['date'] <= pd.to_datetime(end_date))]

    if not filtered_df.empty:
        # Latest value
        latest_row = filtered_df.iloc[-1]
        st.subheader(f"Latest Inflation Data for {selected_state} - {selected_division_name}")
        st.write(f"**Date:** {latest_row['date'].strftime('%Y-%m-%d')}")
        st.write(f"**MoM Inflation:** {latest_row['inflation_mom']:.4f}%")

        # Dynamic line chart
        dynamic_chart_df = filtered_df[['date', 'inflation_mom']].set_index('date')
        st.subheader("ðŸ“ˆ Interactive Inflation Trend")
        st.line_chart(dynamic_chart_df)

        # Summary statistics
        st.subheader("ðŸ“Š Summary Statistics")
        stats = filtered_df['inflation_mom'].describe().to_frame().T
        stats.index = [f"{selected_state} - {selected_division_name}"]
        st.dataframe(stats.style.format("{:.4f}"))
    else:
        st.warning("No data available for the selected range.")

# ------------------------ PAGE 2: FORECAST ------------------------
elif page == "ðŸ”® Forecast":
    st.title("ðŸ”® Inflation Forecast - Next 6 Months")
    st.markdown(f"""
    This forecast uses a simple **linear regression** model to estimate the **next 6 months** of inflation for  
    **{selected_state} - {selected_division_name}**.
    """)

    if len(state_df) >= 6:
        # Linear regression using np.polyfit
        state_df['t'] = np.arange(len(state_df))
        X = state_df['t'].values
        y = state_df['inflation_mom'].values
        a, b = np.polyfit(X, y, deg=1)

        # Forecast next 6 months
        future_t = np.arange(len(X), len(X) + 6)
        future_pred = a * future_t + b
        last_date = state_df['date'].iloc[-1]
        future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=6, freq='MS')

        # Combine historical and forecast data
        forecast_df = pd.DataFrame({
            'date': future_dates,
            'inflation_mom': future_pred
        })
        combined_df = pd.concat([state_df[['date', 'inflation_mom']], forecast_df])
        combined_df = combined_df.set_index('date')

        st.subheader("ðŸ“ˆ Forecast + Historical Trend (Interactive)")
        st.line_chart(combined_df)

        # Forecast Table
        st.subheader("ðŸ“… Forecast Table (Next 6 Months)")
        forecast_display = pd.DataFrame({
            'Date': future_dates.strftime('%Y-%m'),
            'Predicted Inflation MoM (%)': future_pred
        })
        st.dataframe(forecast_display.style.format({"Predicted Inflation MoM (%)": "{:.4f}"}))
    else:
        st.warning("Not enough data to generate forecast.")
